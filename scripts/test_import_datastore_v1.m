clear all; clc;

setenv('NVIDIA_CUDNN', '/usr/local/cuda');
setenv('NVIDIA_TENSORRT', '/opt/TensorRT-5.1.2.2');
results = coder.checkGpuInstall('full')

%% TEMP
% % load pretrained networks
% tempdir='~/Documents/MATLAB/temp';
% pretrainedURL = 'https://www.mathworks.com/supportfiles/vision/data/deeplabv3plusResnet18CamVid.mat';
% pretrainedFolder = fullfile(tempdir,'pretrainedNetwork');
% pretrainedNetwork = fullfile(pretrainedFolder,'deeplabv3plusResnet18CamVid.mat'); 
% if ~exist(pretrainedFolder,'dir')
%     mkdir(pretrainedFolder);
%     disp('Downloading pretrained network (58 MB)...');
%     websave(pretrainedNetwork,pretrainedURL);
% end
% 
% imageURL = 'http://web4.cs.ucl.ac.uk/staff/g.brostow/MotionSegRecData/files/701_StillsRaw_full.zip';
% labelURL = 'http://web4.cs.ucl.ac.uk/staff/g.brostow/MotionSegRecData/data/LabeledApproved_full.zip';
% outputFolder = fullfile(tempdir,'CamVid'); 
% 
% if ~exist(outputFolder, 'dir')
%    
%     mkdir(outputFolder)
%     labelsZip = fullfile(outputFolder,'labels.zip');
%     imagesZip = fullfile(outputFolder,'images.zip');   
%     
%     disp('Downloading 16 MB CamVid dataset labels...'); 
%     websave(labelsZip, labelURL);
%     unzip(labelsZip, fullfile(outputFolder,'labels'));
%     
%     disp('Downloading 557 MB CamVid dataset images...');  
%     websave(imagesZip, imageURL);       
%     unzip(imagesZip, fullfile(outputFolder,'images'));    
% end
% 
imgDir = fullfile(outputFolder,'images');
imds_test = imageDatastore(imgDir);

T = readimage(imds_test,1);
T = histeq(T);
imshow(T)

%% DATA
disp("Setting up Data...")

% classNames = [
%     "lightning" , ...  % "leader" "stroke" "channel"  
%     "sky"       , ...  % "sky" "cloud"
%     "ground"    , ...
%     ];
% 
% labelIDs = {... 
%     % "lightning"
%     [ 
%     255 000 000;...    % leader
%     255 255 255;...    % stroke
%     255 255 000;...    % channel
%     ]  
%     % "sky"
%     [
%     000 255 255;...    % cloud
%     000 000 255;...    % sky
%     ]
%     % "ground"
%     [
%     000 255 000;...    % ground
%     ]
% };

classNames = [
    "leader" , ...
    "stroke" , ...
    "channel", ...  
    "cloud"    , ...
    "sky"  , ...
    "ground"
    ];

labelIDs = [... 
    255 000 000;...    % leader
    255 255 255;...    % stroke
    255 255 000;...    % channel
    000 255 255;...    % cloud
    000 000 255;...    % sky
    000 255 000;...    % ground
    ];

sequences = {...
    '/2017-02-10_162903/2017-02-10_162903_010/';...
    '/2017-02-10_163357/2017-02-10_163357_010';...
    '/2017-02-10_163553/2017-02-10_163553_010';...
    '/2017-02-10_163553/2017-02-10_163553_020';...
    '/2017-02-10_163553/2017-02-10_163553_030';...
    '/2017-02-10_163553/2017-02-10_163553_040';...
    '/2017-02-10_163553/2017-02-10_163553_050';...
    '/2017-02-10_163553/2017-02-10_163553_060';...
    '/2017-02-10_163553/2017-02-10_163553_070';...
    '/2017-02-10_163553/2017-02-10_163553_080';...
    '/2017-02-10_163553/2017-02-10_163553_090';...
    '/2017-02-10_163553/2017-02-10_163553_100';...
    '/2017-02-10_163553/2017-02-10_163553_110';...
    '/2017-02-10_163553/2017-02-10_163553_120';...
    '/2017-02-10_163553/2017-02-10_163553_130';...
    '/2017-02-10_163553/2017-02-10_163553_140';...
    '/2017-02-10_163553/2017-02-10_163553_150';...
    '/2017-02-10_163553/2017-02-10_163553_160';...
    '/2017-02-10_163553/2017-02-10_163553_170';...
    '/2017-02-10_163553/2017-02-10_163553_180';...
    '/2017-02-10_163553/2017-02-10_163553_190';...
    '/2017-02-10_163553/2017-02-10_163553_200';...
    '/2017-02-10_163553/2017-02-10_163553_210';...
    '/2017-02-10_163553/2017-02-10_163553_220';...
    '/2017-02-10_163553/2017-02-10_163553_230';...
    '/2017-02-10_163553/2017-02-10_163553_240';...
    '/2017-02-10_163553/2017-02-10_163553_250';...
    '/2017-02-10_163553/2017-02-10_163553_260';...
    '/2017-02-10_163907/2017-02-10_163907_010';...
    '/2017-02-10_163907/2017-02-10_163907_020';...
    '/2017-02-10_163907/2017-02-10_163907_030';...
    '/2017-02-10_163907/2017-02-10_163907_040';...
    '/2017-02-10_163907/2017-02-10_163907_050';...
    '/2017-02-10_163907/2017-02-10_163907_060';...
    '/2017-02-10_163916/2017-02-10_163916_010';...
    '/2017-02-10_163916/2017-02-10_163916_020';...
    '/2017-02-10_164114/2017-02-10_164114_010';...
    '/2017-02-10_164114/2017-02-10_164114_020';...
    '/2017-02-10_164114/2017-02-10_164114_030';...
    '/2017-02-10_164114/2017-02-10_164114_040';...
    '/2017-02-10_164114/2017-02-10_164114_050';...
    '/2017-02-10_164114/2017-02-10_164114_060';...
    '/2017-02-10_164114/2017-02-10_164114_070';...
    '/2017-02-10_164114/2017-02-10_164114_080';...
    '/2017-02-10_164114/2017-02-10_164114_090';...
    '/2017-02-10_164141/2017-02-10_164141_010'};

% sequences = {
%     'test_8bit'
%     };

path = '/mnt/Shield/Raiden/data/sequences';
imds = imageDatastore(fullfile(path,sequences,'/tif/'),...
    'FileExtensions','.tif');
pxds = pixelLabelDatastore(fullfile(path,sequences,'/mask/'),...
    classNames,labelIDs,'FileExtensions','.tif');

% Overlay colors
cmap = [
    128 000 000;...    % leader
    128 128 128;...    % stroke
    128 128 000;...    % channel
    000 128 128;...    % cloud
    000 000 128;...    % sky
    000 128 000;...    % ground
    ];

% Normalize between [0 1].
cmap = cmap ./ 255;

% View Overlay
I = readimage(imds,1);
I = histeq(I);
imshow(I)
C = readimage(pxds,100);
cmap = jet(numel(classNames));
B = labeloverlay(I,C,'Colormap',cmap);
figure
imshow(B)
pixelLabelColorbar(cmap,classNames);


% Split into training and test 
% ToDo: Partition Method non random (sequential/split)
[imdsTrain, imdsVal, imdsTest, pxdsTrain, pxdsVal, pxdsTest] = partitionCamVidData(imds,pxds);

numTrainingImages = numel(imdsTrain.Files)
numValidationImages = numel(imdsVal.Files)
numTestingImages = numel(imdsTest.Files)


%% NETWORK
disp("Setting up Network...")
% imageSize = [720 960 3];
imageSize = [512 256 3];
numClasses = numel(classNames);
lgraph = helperDeeplabv3PlusResnet18(imageSize, numClasses);    % Create DeepLab v3+.

% Specify the class weights 
tbl = countEachLabel(pxds);
imageFreq = tbl.PixelCount ./ tbl.ImagePixelCount;
    % % Visualize pixel frequency of labels
    % frequency = tbl.PixelCount/sum(tbl.PixelCount);
    % bar(1:numel(classNames),frequency)
    % xticks(1:numel(classNames)) 
    % xticklabels(tbl.Name)
    % xtickangle(45)
    % ylabel('Frequency')
classWeights = median(imageFreq) ./ imageFreq;
pxLayer = pixelClassificationLayer('Name','labels','Classes',tbl.Name,'ClassWeights',classWeights);
lgraph = replaceLayer(lgraph,"classification",pxLayer);

%% TRAINING
disp("Setting up Training...")
% Define validation data.
pximdsVal = pixelLabelImageDatastore(imdsVal,pxdsVal,...
    'DispatchInBackground',true);

% % Define training data
% This causes label2cat to fail due to RGB vs scalar label values
% augmenter = imageDataAugmenter('RandXReflection',true,...
%     'RandXTranslation',[-10 10],'RandYTranslation',[-10 10],...
%     'FillValue',[0 0 0]);
pximds = pixelLabelImageDatastore(imdsTrain,pxdsTrain, ...
    'DataAugmentation',augmenter);

pximds = pixelLabelImageDatastore(imdsTrain,pxdsTrain,...
    'DispatchInBackground',true, 'ColorPreprocessing','none');

% Define training options. 
options = trainingOptions('sgdm', ...
    'LearnRateSchedule','piecewise',...
    'LearnRateDropPeriod',10,...
    'LearnRateDropFactor',0.3,...
    'Momentum',0.9, ...
    'InitialLearnRate',1e-3, ...
    'L2Regularization',0.005, ...
    'ValidationData',pximdsVal,...
    'MaxEpochs',30, ...  
    'MiniBatchSize',8, ...
    'Shuffle','every-epoch', ...
    'CheckpointPath', tempdir, ...
    'VerboseFrequency',2,...
    'Plots','training-progress',...
    'ValidationPatience', 4);
    
doTraining = false;
if doTraining    
    [net, info] = trainNetwork(pximds,lgraph,options);
else
    data = load(pretrainedNetwork); 
    net = data.net;
end